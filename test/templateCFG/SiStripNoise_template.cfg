process ICALIB = {
    
    untracked PSet maxEvents = {untracked int32 input = 1}    
    source = EmptySource {
	untracked uint32 firstRun = 1 
	untracked uint32 numberEventsInRun = 1
    }
    
    service = MessageLogger {
	untracked vstring destinations = { "Noise.log" }
	untracked PSet Noise.log = { untracked string threshold = "INFO" }
    }
    
    
    # tracker geometry    
    include "Geometry/TrackerNumberingBuilder/data/trackerNumberingGeometry.cfi"   
    include "Geometry/TrackerRecoData/data/trackerRecoGeometryXML.cfi"
    include "Geometry/TrackerGeometryBuilder/data/trackerGeometry.cfi"
    
    service = Timing {}
    
    service = PoolDBOutputService{
	string connect = "insert_connectstring"

	#string connect = "oracle://devdb10/CMS_COND_STRIP"
	#string connect = "sqlite_file:dbfile.db"
	#string connect = "oracle://cms_orcoff_int2r/CMS_COND_STRIP" 

	string timetype = "runnumber"    
	#tring timetype = "timestamp"  
  
	untracked string BlobStreamerName="TBufferBlobStreamingService"
	PSet DBParameters = {
	    untracked string authenticationPath="/afs/cern.ch/cms/DB/conddb"
	    untracked int32 messageLevel=2
	}	
        VPSet toPut={ { string record = "SiStripNoisesRcd"   string tag ="insert_tag_Noise"} }    
    }
            
    module prod =  SiStripNoiseDummyCalculator {
	
	bool StripLengthMode = true
	double badStripProbability = 0.
	untracked bool   printDebug = false
	
	#relevant if random mode is chosen
	double MinPositiveNoise = 0.1
	double MeanNoise    = 4.
	double SigmaNoise   = 0.5
	
	#relevant if striplenght mode is chosen
	
	# standard value for deconvolution mode is 51. For peak mode 38.8.
	double NoiseStripLengthSlope = 38.8  
	# standard value for deconvolution mode is 630. For peak mode  414.
	double NoiseStripLengthQuote  = 414.
	double electronPerAdc = 250.0
		
	#cards relevant to mother class
	bool SinceAppendMode = true
	string IOVMode	     = "Run"
	string Record        = "SiStripNoisesRcd"
	bool doStoreOnDB     = true
    
    }
    
    path p = { prod }
    
    module print = AsciiOutputModule {}
    endpath ep = { print }
}


